// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    
    // Organization relationships
    memberships   OrganizationMembership[]
    invitations   OrganizationInvitation[]
    createdOrganizations Organization[] @relation("OrganizationCreator")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Organization Management Models
model Organization {
    id          String   @id @default(cuid())
    name        String
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    
    // Creator relationship
    createdBy   User     @relation("OrganizationCreator", fields: [createdById], references: [id])
    createdById String
    
    // Members and invitations
    memberships OrganizationMembership[]
    invitations OrganizationInvitation[]
    
    // Expense categories
    expenseCategories ExpenseCategory[]
    
    @@index([createdById])
}

enum OrganizationRole {
    ADMIN
    MEMBER
}

model OrganizationMembership {
    id             String           @id @default(cuid())
    role           OrganizationRole @default(MEMBER)
    joinedAt       DateTime         @default(now())
    
    // Relationships
    user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId         String
    organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    organizationId String
    
    @@unique([userId, organizationId])
    @@index([organizationId])
    @@index([userId])
}

enum InvitationStatus {
    PENDING
    ACCEPTED
    REJECTED
    EXPIRED
}

model OrganizationInvitation {
    id             String           @id @default(cuid())
    email          String
    role           OrganizationRole @default(MEMBER)
    status         InvitationStatus @default(PENDING)
    token          String           @unique @default(cuid())
    expiresAt      DateTime
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt
    
    // Relationships
    invitedBy      User             @relation(fields: [invitedById], references: [id])
    invitedById    String
    organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    organizationId String
    
    @@index([email])
    @@index([token])
    @@index([organizationId])
}

// Expense Category Model
model ExpenseCategory {
    id             String       @id @default(cuid())
    name           String
    description    String?
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    
    // Organization relationship
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    organizationId String
    
    @@unique([organizationId, name])
    @@index([organizationId])
}
